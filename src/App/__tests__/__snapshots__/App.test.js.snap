// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`App renders correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <App
    baseUrl=""
    locale={Object {}}
    routes={
      Array [
        Object {
          "component": [Function],
          "componentPath": "Index",
          "path": "/",
        },
      ]
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": <LocaleProvider
        messages={Object {}}
      >
        <BrowserRouter
          basename=""
        >
          <withRouter(StatusMessages)>
            <Switch>
              <Route
                componentPath="Index"
                path="/"
                render={[Function]}
                routes={
                  Array [
                    Object {
                      "component": [Function],
                      "componentPath": "Index",
                      "path": "/",
                    },
                  ]
                }
              />
            </Switch>
          </withRouter(StatusMessages)>
        </BrowserRouter>
      </LocaleProvider>,
      "value": Object {
        "baseUrl": "",
      },
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <BrowserRouter
          basename=""
        >
          <withRouter(StatusMessages)>
            <Switch>
              <Route
                componentPath="Index"
                path="/"
                render={[Function]}
                routes={
                  Array [
                    Object {
                      "component": [Function],
                      "componentPath": "Index",
                      "path": "/",
                    },
                  ]
                }
              />
            </Switch>
          </withRouter(StatusMessages)>
        </BrowserRouter>,
        "messages": Object {},
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "basename": "",
          "children": <withRouter(StatusMessages)>
            <Switch>
              <Route
                componentPath="Index"
                path="/"
                render={[Function]}
                routes={
                  Array [
                    Object {
                      "component": [Function],
                      "componentPath": "Index",
                      "path": "/",
                    },
                  ]
                }
              />
            </Switch>
          </withRouter(StatusMessages)>,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": <Switch>
              <Route
                componentPath="Index"
                path="/"
                render={[Function]}
                routes={
                  Array [
                    Object {
                      "component": [Function],
                      "componentPath": "Index",
                      "path": "/",
                    },
                  ]
                }
              />
            </Switch>,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": Array [
                <Route
                  componentPath="Index"
                  path="/"
                  render={[Function]}
                  routes={
                    Array [
                      Object {
                        "component": [Function],
                        "componentPath": "Index",
                        "path": "/",
                      },
                    ]
                  }
                />,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": "/",
                "nodeType": "class",
                "props": Object {
                  "componentPath": "Index",
                  "path": "/",
                  "render": [Function],
                  "routes": Array [
                    Object {
                      "component": [Function],
                      "componentPath": "Index",
                      "path": "/",
                    },
                  ],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": [Function],
          },
          "type": [Function],
        },
        "type": [Function],
      },
      "type": [Function],
    },
    "type": Object {
      "$$typeof": Symbol(react.provider),
      "_context": Object {
        "$$typeof": Symbol(react.context),
        "Consumer": [Circular],
        "Provider": [Circular],
        "_calculateChangedBits": null,
        "_changedBits": 0,
        "_changedBits2": 0,
        "_currentRenderer": null,
        "_currentRenderer2": null,
        "_currentValue": Object {},
        "_currentValue2": Object {},
        "_defaultValue": Object {},
      },
    },
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": <LocaleProvider
          messages={Object {}}
        >
          <BrowserRouter
            basename=""
          >
            <withRouter(StatusMessages)>
              <Switch>
                <Route
                  componentPath="Index"
                  path="/"
                  render={[Function]}
                  routes={
                    Array [
                      Object {
                        "component": [Function],
                        "componentPath": "Index",
                        "path": "/",
                      },
                    ]
                  }
                />
              </Switch>
            </withRouter(StatusMessages)>
          </BrowserRouter>
        </LocaleProvider>,
        "value": Object {
          "baseUrl": "",
        },
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <BrowserRouter
            basename=""
          >
            <withRouter(StatusMessages)>
              <Switch>
                <Route
                  componentPath="Index"
                  path="/"
                  render={[Function]}
                  routes={
                    Array [
                      Object {
                        "component": [Function],
                        "componentPath": "Index",
                        "path": "/",
                      },
                    ]
                  }
                />
              </Switch>
            </withRouter(StatusMessages)>
          </BrowserRouter>,
          "messages": Object {},
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "basename": "",
            "children": <withRouter(StatusMessages)>
              <Switch>
                <Route
                  componentPath="Index"
                  path="/"
                  render={[Function]}
                  routes={
                    Array [
                      Object {
                        "component": [Function],
                        "componentPath": "Index",
                        "path": "/",
                      },
                    ]
                  }
                />
              </Switch>
            </withRouter(StatusMessages)>,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": <Switch>
                <Route
                  componentPath="Index"
                  path="/"
                  render={[Function]}
                  routes={
                    Array [
                      Object {
                        "component": [Function],
                        "componentPath": "Index",
                        "path": "/",
                      },
                    ]
                  }
                />
              </Switch>,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": Array [
                  <Route
                    componentPath="Index"
                    path="/"
                    render={[Function]}
                    routes={
                      Array [
                        Object {
                          "component": [Function],
                          "componentPath": "Index",
                          "path": "/",
                        },
                      ]
                    }
                  />,
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": "/",
                  "nodeType": "class",
                  "props": Object {
                    "componentPath": "Index",
                    "path": "/",
                    "render": [Function],
                    "routes": Array [
                      Object {
                        "component": [Function],
                        "componentPath": "Index",
                        "path": "/",
                      },
                    ],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
              ],
              "type": [Function],
            },
            "type": [Function],
          },
          "type": [Function],
        },
        "type": [Function],
      },
      "type": Object {
        "$$typeof": Symbol(react.provider),
        "_context": Object {
          "$$typeof": Symbol(react.context),
          "Consumer": [Circular],
          "Provider": [Circular],
          "_calculateChangedBits": null,
          "_changedBits": 0,
          "_changedBits2": 0,
          "_currentRenderer": null,
          "_currentRenderer2": null,
          "_currentValue": Object {},
          "_currentValue2": Object {},
          "_defaultValue": Object {},
        },
      },
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;
